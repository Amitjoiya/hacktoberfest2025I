#!/usr/bin/env python3
"""
SNMP Test Client - OLD API (camelCase) for pysnmp-lextudio
"""

from pysnmp.entity import engine, config
from pysnmp.carrier.asyncore.dgram import udp
from pysnmp.entity.rfc3413 import cmdgen
from pysnmp.proto import rfc1902
import time

HOST = '127.0.0.1'
PORT = 16100
COMMUNITY = 'public'

print("="*60)
print("  SNMP Agent Tester (pysnmp-lextudio old API)")
print("="*60)

# Initialize
snmpEngine = engine.SnmpEngine()

# Transport (OLD API)
config.addTransport(
    snmpEngine,
    udp.domainName,
    udp.UdpTransport().openClientMode()
)

# Community (OLD API)
config.addV1System(snmpEngine, 'test-agent', COMMUNITY)

# Target (OLD API)
config.addTargetParams(snmpEngine, 'my-creds', 'test-agent', 'noAuthNoPriv', 1)  # 1 = SNMPv2c
config.addTargetAddr(
    snmpEngine, 'my-router',
    udp.domainName, (HOST, PORT),
    'my-creds', timeout=200, retryCount=1
)

print(f"\nTesting {HOST}:{PORT} with community '{COMMUNITY}'\n")

# Test OIDs
test_oids = [
    (1,3,6,1,2,1,1,1,0),           # sysDescr
    (1,3,6,1,4,1,53864,1,0),       # deviceName
    (1,3,6,1,4,1,53864,10,1,0),    # voltageX100
    (1,3,6,1,4,1,53864,10,2,0),    # currentX1000
    (1,3,6,1,4,1,53864,20,1,0),    # temperatureX10
    (1,3,6,1,4,1,53864,30,1,0),    # relayState
]

def cbFun(snmpEngine, sendRequestHandle, errorIndication, errorStatus, 
          errorIndex, varBinds, cbCtx):
    """Callback untuk GET response"""
    oid = cbCtx['oid']
    
    if errorIndication:
        print(f"  ❌ ERROR: {errorIndication}\n")
    elif errorStatus:
        print(f"  ❌ SNMP Error: {errorStatus.prettyPrint()}\n")
    else:
        for varBind in varBinds:
            print(f"  ✅ OID: {varBind[0]}")
            print(f"     Value: {varBind[1]}")
            print(f"     Type: {varBind[1].__class__.__name__}\n")
    
    cbCtx['done'] = True

# Test GET for each OID
for oid in test_oids:
    oid_str = '.'.join(map(str, oid))
    print(f"GET {oid_str}...")
    
    ctx = {'oid': oid, 'done': False}
    
    cmdgen.GetCommandGenerator().sendVarBinds(
        snmpEngine,
        'my-router',
        None, '',  # contextEngineId, contextName
        [(rfc1902.ObjectName(oid), rfc1902.Null())],
        cbFun,
        ctx
    )
    
    snmpEngine.transportDispatcher.jobStarted(1)
    
    # Wait for response
    timeout = time.time() + 3
    while not ctx['done'] and time.time() < timeout:
        snmpEngine.transportDispatcher.runDispatcher(timeout=0.1)
    
    if not ctx['done']:
        print(f"  ❌ TIMEOUT\n")
    
    snmpEngine.transportDispatcher.jobFinished(1)

print("="*60)
print("\nTesting GETNEXT (walk from 1.3.6.1.4.1.53864)...")
print("="*60 + "\n")

walk_results = []
def cbFun_next(snmpEngine, sendRequestHandle, errorIndication, errorStatus,
               errorIndex, varBindTable, cbCtx):
    """Callback untuk GETNEXT"""
    if errorIndication:
        print(f"ERROR: {errorIndication}")
        cbCtx['done'] = True
        return
    
    if errorStatus:
        print(f"SNMP Error: {errorStatus.prettyPrint()}")
        cbCtx['done'] = True
        return
    
    for varBindRow in varBindTable:
        for oid, val in varBindRow:
            oid_str = str(oid)
            
            # Check if still in enterprise tree
            if not oid_str.startswith('1.3.6.1.4.1.53864'):
                print(f"\n[Reached end of enterprise tree]")
                cbCtx['done'] = True
                return
            
            print(f"  {oid} = {val}")
            walk_results.append((oid, val))
            
            if len(walk_results) >= 10:  # Limit
                cbCtx['done'] = True
                return
            
            # Continue walk
            cbCtx['last_oid'] = oid

ctx_walk = {
    'done': False,
    'last_oid': rfc1902.ObjectName((1,3,6,1,4,1,53864))
}

# Start walk
for i in range(15):  # Max iterations
    if ctx_walk['done']:
        break
    
    cmdgen.NextCommandGenerator().sendVarBinds(
        snmpEngine,
        'my-router',
        None, '',
        [(ctx_walk['last_oid'], rfc1902.Null())],
        cbFun_next,
        ctx_walk
    )
    
    snmpEngine.transportDispatcher.jobStarted(1)
    
    timeout = time.time() + 2
    temp_done = False
    
    def check_done():
        return ctx_walk.get('done', False) or time.time() > timeout
    
    while not check_done():
        snmpEngine.transportDispatcher.runDispatcher(timeout=0.1)
    
    snmpEngine.transportDispatcher.jobFinished(1)
    
    if ctx_walk.get('done'):
        break

print(f"\n[Found {len(walk_results)} objects in enterprise tree]")

snmpEngine.transportDispatcher.closeDispatcher()

print("\n" + "="*60)
print("Test completed!")
print("="*60)
